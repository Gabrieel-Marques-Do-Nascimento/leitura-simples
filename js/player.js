import { $screen_text, $PlayButton, $screen_text_style, $PauseButton, pai_screen_style, $bookmark, marker_style, SettingData, $button_low, $button_up, $ButtonScrollPage, $SettingDelay, bookmark_style, } from "./script.js"; import { console_log, delay } from "./utils.js"; import { v } from "./screen.js"; export let highlight_top = Number(marker_style.top.replace("px", "")); const _scroll_height = $screen_text.scrollHeight; const bookmark_rect = $bookmark.getBoundingClientRect(); export let highlight_top_erd = pai_screen_style.marginTop; function buttons_state(buttons, state) { for (let i = 0; i < buttons.length; i++) { buttons[i].disabled = state[i]; } } async function alterarTop_local(novoTop, error = 0, line = 0, on = true) { let styleheight = Number($screen_text_style.height.replace("px", "")); let end_line = v[1]; if (on) { $bookmark.style.transition = "top 0.1s ease"; } if (novoTop < highlight_top) { novoTop = highlight_top; } if (novoTop > styleheight) { novoTop = styleheight - (line - error); } $bookmark.style.top = novoTop + "px"; } let line = _lineheight_(SettingData["font-size"]); window.pause = false; $PlayButton.addEventListener("click", function () { buttons_state( [$button_low, $button_up, $ButtonScrollPage], [true, true, true] ); $PauseButton.style.animation = "girar 2s linear infinite"; window.pause = false; $PlayButton.style.display = "none"; $PauseButton.style.display = "block"; play( line, $screen_text, Number(_scroll_height), alterarTop, [Number(bookmark_style.top.replace("px", "")) + line, 8, line], scrollarParagrafo, 2000 ); }); $PauseButton.addEventListener("click", function () { buttons_state( [$button_low, $button_up, $ButtonScrollPage, $PlayButton], [false, false, false, true] ); window.pause = true; $PlayButton.style.display = "block"; $PauseButton.style.display = "none"; setTimeout(function () { $PlayButton.disabled = false; }, 600); }); async function aut_page() { let the_end = false; const scrollHeight = $screen_text.scrollHeight; const clientHeight = $screen_text.clientHeight; let scrollTop = $screen_text.scrollTop; let scrollbotton = scrollTop + clientHeight; if (scrollbotton + 1 >= scrollHeight) { the_end = true; } scrollarParagrafo(v[0] + scrollTop, false); return the_end; } async function aut_line(lineScrollParams, line_size) { } async function play( line_heght, elementhtml, scroll_heigh, dow_line_func, lineScrollParams, page_func, ndelay ) { async function runner() { let end = false; let marcador_top = lineScrollParams[0]; while (!end) { await delay(2000); let delay_al = SettingData["delay"]; let highlighttop = parseInt( bookmark_style.top.replace("px", "") ); let line_size = parseInt(v[0] / line_heght); if ( highlighttop > Number(highlight_top_erd.replace("px", "")) + line ) { line_size = parseInt((v[0] - highlighttop) / line_heght) + 1; } for (let i = 0; i < line_size; i++) { if (window.pause) { break; } await Promise.race([ delay(delay_al), new Promise((_, reject) => { const checkPause = setInterval(() => { if (window.pause) { clearInterval(checkPause); reject(new Error("Pausado")); } }, 10); }), ]).catch((err) => { console_log(err.message); }); if (window.pause) { break; } await alterarTop_local( marcador_top, lineScrollParams[1], lineScrollParams[2], false ); marcador_top += lineScrollParams[2]; } if (window.pause) { break; } end = await aut_page(); marcador_top = Number(highlight_top_erd.replace("px", "")) + line; if (end) { $PauseButton.click(); break; } } } await runner(); } export function _lineheight_(font_size) { return Number(font_size) + Number(font_size) / 2; } export function alterarTop(novoTop, error = 0, line = 0, on = true) { let styleheight = Number($screen_text_style.height.replace("px", "")); let end_line = v[1]; if (on) { $bookmark.style.transition = "top 0.1s ease"; } let largura = window.innerWidth; if (largura <= 750) { if (novoTop < highlight_top) { novoTop = highlight_top; } if (novoTop > styleheight) { novoTop = styleheight - 10; } } if (largura > 750) { if (novoTop < highlight_top) { novoTop = highlight_top; } if (novoTop > styleheight) { novoTop = styleheight - (line - error); } } $bookmark.style.top = novoTop + "px"; } export function scrollarParagrafo(pixels, so = true) { if (so) { $bookmark.style.transition = "top 2s ease"; setTimeout(() => { $bookmark.style.transition = "top 0.2s ease"; }, 1000); } $bookmark.style.top = highlight_top_erd; $screen_text.scrollTo({ top: pixels, behavior: "smooth", }); }